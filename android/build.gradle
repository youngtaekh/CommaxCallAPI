apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

task deleteJar(type: Delete) {
    delete 'libs/jars/logmanagementlib.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'logmanagementlib.jar')
}

createJar.dependsOn(deleteJar, build)

group = 'io.dotconnect'
version = '0.1.0'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apiKey")
//    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    configurations = ['archives'] // When uploading configuration files

    publish = false // [Default: false] Whether version should be auto published after an upload

    pkg {
        repo = 'maven' // Repository name (Created in the repository Bintray site)
        name = project.name // module name
        userOrg = user // An optional organization name when the repo belongs to one of the user's orgs
        desc = 'Bintray sample library' // Optional
        licenses = ['Apache-2.0']

        vcsUrl = 'http://nunu.voiceloco.com/youngtaek/voiceloco_api'
        websiteUrl = 'http://nunu.voiceloco.com/youngtaek/voiceloco_api'
        // issueTrackerUrl = '' // Optional

        labels = ['aar', 'android', 'example'] // Optional
        publicDownloadNumbers = true

        version {
            name = '0.1.3' // The name of your library project
            desc = '' // Optional - Version-specific description'
            released  = new Date() // Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = '0.1.3'
        }
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.1"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
//            manifest.srcFile "../../androidapp/AndroidManifest.xml"
            java.srcDirs = [
                    "src/main/java", "../p2p/src/main/java", "../signaling/src/main/java"
            ]
//            res.srcDirs = [
//                    "../../androidapp/res"
//            ]
        }
//        androidTest {
//            manifest.srcFile "../../androidtests/AndroidManifest.xml"
//            java.srcDirs = [
//                    "../../androidtests/src"
//            ]
//            // This test doesn't work in Android Studio.
//            java.exclude('**/CallActivityStubbedInputOutputTest.java')
//        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation fileTree(dir: 'libs', include: ['*.aar'])

//    implementation project(path: ':signaling')
//    implementation project(path: ':p2p')
//    implementation files('libs/signaling-release.aar')
//    implementation files('libs/p2p-release.aar')
//    implementation 'io.dotconnect.signaling:signaling-release:1.0@aar'
//    implementation 'io.dotconnect.p2p:p2p-release:1.0@aar'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    api 'org.webrtc:google-webrtc:1.0.+'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}

